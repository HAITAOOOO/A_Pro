#include "usart_bsp.h"
#include "usart.h"
#include <stdarg.h>
#include "stdio.h"

double yaw_usart6,x_usart6,y_usart6;
int info_usart3;
int info_usart7;
int info_usart8;

/**
* @brief          串口发送
* @param[in]      UART_HandleTypeDef*huart：串口句柄
* @param[in]      const char *fmt：输出格式
* @param[in]			...：输出内容
* @retval         none
*/
void PRINT(UART_HandleTypeDef*huart,const char *fmt,...)
{
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
    //return length of string
    //返回字符串长度
    len = vsprintf((char *)tx_buf, fmt, ap);
    va_end(ap);
    HAL_UART_Transmit(huart,tx_buf,len,100);
}

/**
* @brief          激光测距数据解码
* @param[in]      none
* @retval         none
*/
void Laser_decoding()
{
		if(rx_buffer_usart3[3] == '.')
    {
        info_usart3 = (rx_buffer_usart3[2] - '0')*1000 + (rx_buffer_usart3[4] - '0')*100 + (rx_buffer_usart3[5] - '0')*10 + (rx_buffer_usart3[6] - '0');
    }
    else if(rx_buffer_usart3[4] == '.')
    {
        info_usart3 = (rx_buffer_usart3[2] - '0')*10000 + (rx_buffer_usart3[3] - '0')*1000 + (rx_buffer_usart3[5] - '0')*100 + (rx_buffer_usart3[6] - '0')*10 + (rx_buffer_usart3[7] - '0');
    }
    if(rx_buffer_usart7[3] == '.')
    {
        info_usart7 = (rx_buffer_usart7[2] - '0')*1000 + (rx_buffer_usart7[4] - '0')*100 + (rx_buffer_usart7[5] - '0')*10 + (rx_buffer_usart7[6] - '0');
    }
    else if(rx_buffer_usart7[4] == '.')
    {
        info_usart7 = (rx_buffer_usart7[2] - '0')*10000 + (rx_buffer_usart7[3] - '0')*1000 + (rx_buffer_usart7[5] - '0')*100 + (rx_buffer_usart7[6] - '0')*10 + (rx_buffer_usart7[7] - '0');
    }
    if(rx_buffer_usart8[3] == '.')
    {
        info_usart8 = (rx_buffer_usart8[2] - '0')*1000 + (rx_buffer_usart8[4] - '0')*100 + (rx_buffer_usart8[5] - '0')*10 + (rx_buffer_usart8[6] - '0');
    }
    else if(rx_buffer_usart6[4] == '.')
    {
        info_usart8 = (rx_buffer_usart8[2] - '0')*10000 + (rx_buffer_usart8[3] - '0')*1000 + (rx_buffer_usart8[5] - '0')*100 + (rx_buffer_usart8[6] - '0')*10 + (rx_buffer_usart8[7] - '0');
    }
}
/**
* @brief          偏航角数据解码
* @param[in]      none
* @retval         none
*/
void yaw_decoding()
{

    if(rx_buffer_usart6[0]=='-')//负数
    {
        if(rx_buffer_usart6[2] == '.')//一位整数
        {
            yaw_usart6  = 	(rx_buffer_usart6[1]-'0')+
                            (rx_buffer_usart6[3]-'0')*0.1+ (rx_buffer_usart6[4]-'0')*0.01+
                            (rx_buffer_usart6[5]-'0')*0.001+(rx_buffer_usart6[6]-'0')*0.001+
                            (rx_buffer_usart6[7]-'0')*0.0001+(rx_buffer_usart6[8]-'0')*0.00001;
            yaw_usart6=-yaw_usart6;
        }
        else if(rx_buffer_usart6[3]=='.')//两位整数
        {
            yaw_usart6 = 		(rx_buffer_usart6[1]-'0')*10+(rx_buffer_usart6[2]-'0')+
                            (rx_buffer_usart6[4]-'0')*0.1+(rx_buffer_usart6[5]-'0')*0.01+
                            (rx_buffer_usart6[6]-'0')*0.001+(rx_buffer_usart6[7]-'0')*0.0001+
                            (rx_buffer_usart6[8]-'0')*0.00001+(rx_buffer_usart6[9]-'0')*0.000001;
            yaw_usart6=-yaw_usart6;
					
        }
        else if(rx_buffer_usart6[4]=='.')
        {
            yaw_usart6 = 		(rx_buffer_usart6[1]-'0')*100+(rx_buffer_usart6[2]-'0')*10+(rx_buffer_usart6[3]-'0')+
                            (rx_buffer_usart6[5]-'0')*0.1+(rx_buffer_usart6[6]-'0')*0.01+
                            (rx_buffer_usart6[7]-'0')*0.001+(rx_buffer_usart6[8]-'0')*0.0001+
                            (rx_buffer_usart6[9]-'0')*0.00001+(rx_buffer_usart6[10]-'0')*0.000001;
            yaw_usart6=-yaw_usart6;
        }
    }
    else//正数
    {
        if(rx_buffer_usart6[1] == '.')//一位整数
        {
            yaw_usart6 = 		(rx_buffer_usart6[0]-'0')+
														(rx_buffer_usart6[2]-'0')*0.1+ (rx_buffer_usart6[3]-'0')*0.01+
														(rx_buffer_usart6[4]-'0')*0.001+(rx_buffer_usart6[5]-'0')*0.001+
														(rx_buffer_usart6[6]-'0')*0.0001+(rx_buffer_usart6[7]-'0')*0.00001;
        }
        else if(rx_buffer_usart6[2]=='.')
        {
            yaw_usart6 =	  (rx_buffer_usart6[0]-'0')*10+(rx_buffer_usart6[1]-'0')+
														(rx_buffer_usart6[3]-'0')*0.1+(rx_buffer_usart6[4]-'0')*0.01+
														(rx_buffer_usart6[5]-'0')*0.001+(rx_buffer_usart6[6]-'0')*0.0001+
														(rx_buffer_usart6[7]-'0')*0.00001+(rx_buffer_usart6[8]-'0')*0.000001;
        }
        else if(rx_buffer_usart6[3]=='.')
        {
            yaw_usart6 = 		(rx_buffer_usart6[0]-'0')*100+(rx_buffer_usart6[1]-'0')*10+(rx_buffer_usart6[2]-'0')+
														(rx_buffer_usart6[4]-'0')*0.1+(rx_buffer_usart6[5]-'0')*0.01+
														(rx_buffer_usart6[6]-'0')*0.001+(rx_buffer_usart6[7]-'0')*0.0001+
														(rx_buffer_usart6[8]-'0')*0.00001+(rx_buffer_usart6[9]-'0')*0.000001;
        }
    }
}
